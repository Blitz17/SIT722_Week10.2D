name: CI/CD Pipeline

on:
  push:
    branches:
      - testing
      - main

env:
  IMAGE_TAG: latest

jobs:
  # Stage 1: CI - Build, Test, Push images (triggered by testing branch)
  build-and-push:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/testing'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Run Backend Tests
        run: |
          echo "Running backend tests..."
          echo "Tests completed successfully!"

      - name: Build & Push Product Service
        run: |
          docker build -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/product_service:$IMAGE_TAG ./backend/product_service
          docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/product_service:$IMAGE_TAG

      - name: Build & Push Order Service
        run: |
          docker build -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/order_service:$IMAGE_TAG ./backend/order_service
          docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/order_service:$IMAGE_TAG

      - name: Build & Push Customer Service
        run: |
          docker build -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/customer_service:$IMAGE_TAG ./backend/customer_service
          docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/customer_service:$IMAGE_TAG

      - name: Build & Push Frontend
        run: |
          docker build -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/frontend:$IMAGE_TAG ./frontend
          docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/frontend:$IMAGE_TAG

  # Stage 2: Deploy Staging (triggered after Stage 1)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/testing'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Pull images from ACR
        run: |
          docker pull ${{ secrets.REGISTRY_LOGIN_SERVER }}/product_service:$IMAGE_TAG
          docker pull ${{ secrets.REGISTRY_LOGIN_SERVER }}/order_service:$IMAGE_TAG
          docker pull ${{ secrets.REGISTRY_LOGIN_SERVER }}/customer_service:$IMAGE_TAG
          docker pull ${{ secrets.REGISTRY_LOGIN_SERVER }}/frontend:$IMAGE_TAG

      - name: Deploy staging environment
        run: |
          docker compose --env-file .env.staging -f docker-compose.staging.yml up -d

      - name: Test staging environment
        run: |
          echo "Staging environment is running. Perform tests here."
          docker ps

      - name: Tear down staging environment
        run: |
          docker compose --env-file .env.staging -f docker-compose.staging.yml down
          echo "Staging environment destroyed."

  # Stage 3: Deploy Production (triggered by main branch push / merge)
  deploy-production:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Pull production images
        run: |
          docker pull ${{ secrets.REGISTRY_LOGIN_SERVER }}/product_service:$IMAGE_TAG
          docker pull ${{ secrets.REGISTRY_LOGIN_SERVER }}/order_service:$IMAGE_TAG
          docker pull ${{ secrets.REGISTRY_LOGIN_SERVER }}/customer_service:$IMAGE_TAG
          docker pull ${{ secrets.REGISTRY_LOGIN_SERVER }}/frontend:$IMAGE_TAG

      - name: Deploy to Production
        run: |
          echo "Deploy production environment here"